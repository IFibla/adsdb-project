from models.storage.layers.exploitation import Exploitation
import pandas as pd


class MVCSafetyRatingByBrandExploitation(Exploitation):
    def _get_trusted_table_names(self) -> list[str]:
        return ["mvc_crash", "mvc_person", "mvc_vehicles", "nhtsa_safety_rating"]

    def _get_exploitation_table_name(self) -> str:
        return "mvc_safety_rating_by_brand"

    def _join_tables(self) -> pd.DataFrame:
        dfs = {
            table_name: self.trusted_db_connector.get_table_as_dataframe(table_name)
            for table_name in self._get_trusted_table_names()
        }

        mvc_df = pd.merge(
            dfs["mvc_crash"], dfs["mvc_person"], on="collision_id", how="inner"
        )
        mvc_df = pd.merge(mvc_df, dfs["mvc_vehicles"], on="collision_id", how="inner")

        mvc_df = mvc_df[
            [
                "number_of_persons_injured",
                "number_of_persons_killed",
                "number_of_pedestrians_injured",
                "number_of_pedestrians_killed",
                "number_of_cyclist_injured",
                "number_of_cyclist_killed",
                "number_of_motorist_injured",
                "number_of_motorist_killed",
                "vehicle_make",
                "vehicle_year",
                "collision_id",
            ]
        ]
        dfs["nhtsa_safety_rating"]["make"] = dfs["nhtsa_safety_rating"]["make"].apply(
            lambda x: x.lower()
        )
        safety_rating = (
            dfs["nhtsa_safety_rating"]
            .groupby("make", as_index=False)["overall_rating"]
            .mean()
        )
        mvc_sr_df = pd.merge(
            mvc_df, safety_rating, left_on="vehicle_make", right_on="make"
        )
        mvc_sr_df = mvc_sr_df.dropna(subset="overall_rating")
        return mvc_sr_df
