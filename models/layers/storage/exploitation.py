from src.helpers.db_connector import (
    DBConnector,
)
from models.layers.layer import Layer
from abc import abstractmethod
import pandas as pd


class Exploitation(Layer):
    """
    A base class for exploitation processes that extends the Layer class.
    This class is designed to manage and execute data joins between trusted
    and exploitation databases.
    """

    def __init__(
        self, trusted_db_connector: DBConnector, exploitation_db_connector: DBConnector
    ):
        """
        Initializes Exploitation with connectors for both trusted and exploitation databases.
        Args:
            trusted_db_connector (DBConnector): Connector for the trusted database.
            exploitation_db_connector (DBConnector): Connector for the exploitation database.
        """
        self.trusted_db_connector = trusted_db_connector
        self.exploitation_db_connector = exploitation_db_connector

    @abstractmethod
    def _get_trusted_table_names(self) -> list[str]:
        """
        Abstract method to retrieve a list of table names from the trusted database.
        This method must be implemented in subclasses.
        """
        pass

    @abstractmethod
    def _get_exploitation_table_name(self) -> str:
        """
        Abstract method to define the target table name for exploitation data.
        This method must be implemented in subclasses.
        """
        pass

    @abstractmethod
    def _join_tables(self) -> pd.DataFrame:
        """
        Abstract method to join tables from the trusted database.
        Returns:
            pd.DataFrame: The result of joining trusted tables.
        """
        pass

    def execute(self):
        """
        Executes the data joining process and saves the result into the exploitation database.
        """
        df = self._join_tables()
        self.exploitation_db_connector.insert_data(
            self._get_exploitation_table_name(), df
        )
        print(f"Table {self._get_exploitation_table_name()} created successfully.")
